<?php
/**
 * @file
 * Lazyloader Module
 *
 * @author: Daniel Honrade http://drupal.org/user/351112
 *
 * Note: Obviously, this will not work unless the javascript is on.
 *
 */
define('LAZYLOADER_PATH', base_path() . drupal_get_path('module', 'lazyloader'));


/**
 * Implements hook_init().
 *
 * Sets the defaults global
 *
 */
function lazyloader_init() {

  global $_lazyloader_defaults;
  global $_lazyloader_set;

  $_lazyloader_defaults = array(
    'enabled'     => 1,  // always enabled by default
    'distance'    => 0,  // 0 pixel distance to the viewable browser window before the actual image is loaded
    'loader_icon' => 7,  // default loader icon
    'placeholder' => '', // stand-in image before the actual image gets loaded
    'exclude'     => '', // pages to exclude from lazyloader
  );

  $_lazyloader_set = variable_get('lazyloader', $_lazyloader_defaults);
}


/**
 * Implements hook_menu().
 *
 */
function lazyloader_menu() {

  $items = array();

  $items['admin/config/media/lazyloader'] = array(
    'title' => 'Image Lazyloader',
    'page callback' => 'drupal_get_form',
    'access callback' => 'user_access',
    'access arguments' => array('administer lazyloader'),
    'page arguments' => array('lazyloader_admin', NULL),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'lazyloader.admin.inc',
    'description' => 'Configure Lazyloader',
  );
  return $items;
}


/**
 * Implements hook_perm().
 *
 */
function lazyloader_permission() {

  return array(
    'administer lazyloader' => array(
      'title' => t('Administer Lazyloader'),
      'description' => t('Perform administration tasks for Lazyloader.'),
    ),
  );
}


/*
 * Implements hook_theme_registry_alter().
 */
function lazyloader_theme_registry_alter(&$theme_registry) {

  global $_lazyloader_set;

  $settings = $_lazyloader_set;

  if ($settings['enabled'] && !drupal_match_path($_GET['q'], $settings['exclude'])) {
    $theme_registry['image']['function'] = 'lazyloader_image';
  }

  return $theme_registry;
}


/**
 * Returns HTML for an image.
 *
 * @param $variables
 *   An associative array containing:
 *   - path: Either the path of the image file (relative to base_path()) or a
 *     full URL.
 *   - width: The width of the image (if known).
 *   - height: The height of the image (if known).
 *   - alt: The alternative text for text-based browsers. HTML 4 and XHTML 1.0
 *     always require an alt attribute. The HTML 5 draft allows the alt
 *     attribute to be omitted in some cases. Therefore, this variable defaults
 *     to an empty string, but can be set to NULL for the attribute to be
 *     omitted. Usually, neither omission nor an empty string satisfies
 *     accessibility requirements, so it is strongly encouraged for code calling
 *     theme('image') to pass a meaningful value for this variable.
 *     - http://www.w3.org/TR/REC-html40/struct/objects.html#h-13.8
 *     - http://www.w3.org/TR/xhtml1/dtds.html
 *     - http://dev.w3.org/html5/spec/Overview.html#alt
 *   - title: The title text is displayed when the image is hovered in some
 *     popular browsers.
 *   - attributes: Associative array of attributes to be placed in the img tag.
 */
function lazyloader_image($variables) {

  global $_lazyloader_set;

  $settings = $_lazyloader_set;

  $attributes = $variables['attributes'];
  $noscript_attributes = $variables['attributes'];

  if ($settings['enabled'] && !drupal_match_path($_GET['q'], $settings['exclude'])) {

    $attributes['data-src'] = file_create_url($variables['path']);

    // path to dummy placeholder image, to be replaced by actual image
    $image_placeholder = !empty($settings['placeholder']) ? base_path() . trim($settings['placeholder']): LAZYLOADER_PATH . '/image_placeholder.gif';

    $attributes['src'] = $image_placeholder;

    $noscript_attributes['src'] = file_create_url($variables['path']);
  }
  else {
    $attributes['src'] = file_create_url($variables['path']);
  }

  // responsive web design module
  if (module_exists('rwdimages')) {
    global $_rwdimages_set;

    $rwdimages_settings = $_rwdimages_set;

    if ($rwdimages_settings['enabled'] && !drupal_match_path($_GET['q'], $rwdimages_settings['exclude'])) {
      $attributes['class'] = array('rwdimage');
    }
  }

  foreach (array('width', 'height', 'alt', 'title') as $key) {
    if (isset($variables[$key])) $attributes[$key] = $variables[$key];
    if (isset($variables[$key])) $noscript_attributes[$key] = $variables[$key];
  }

  $noscript = '<noscript><img' . drupal_attributes($noscript_attributes) . ' /></noscript>';

  return '<img' . drupal_attributes($attributes) . ' />' . $noscript;
}


/**
 * Implements hook_process_html().
 *
 * Initialize the trigger for lazyloader
 *
 */
function lazyloader_process_html(&$vars) {

  global $_lazyloader_set;

  $settings = $_lazyloader_set;

  if ($settings['enabled'] && !drupal_match_path($_GET['q'], $settings['exclude'])) {

    $icon = ($settings['loader_icon'] != 0) ? LAZYLOADER_PATH . '/loader/loader-' . $settings['loader_icon'] . '.gif': '';

    $lazyloader_init = '
      <noscript><style type="text/css" media="all">img[data-src] { display: none; }</style></noscript>
      <script type="text/javascript">
        jQuery(function($){
          $("img[data-src]").lazyloader({distance: ' . trim($settings['distance']) . ', icon: "' . $icon . '" });
        });
      </script>';

    $vars['page_bottom'] .= $lazyloader_init;
  }
}
